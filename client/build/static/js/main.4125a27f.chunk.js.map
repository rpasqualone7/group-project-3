{"version":3,"sources":["components/Post/post.js","components/PostEditor/postEditor.js","App.js","registerServiceWorker.js","index.js"],"names":["Post","props","react_default","a","createElement","className","postBody","PostEditor","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","newPostBody","handlePostEditorInputChange","bind","assertThisInitialized","createPost","ev","setState","target","value","addPost","lib","label","onChange","type","waves","onClick","right","Component","App","posts","newState","assign","push","map","idx","post","key","postEditor","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.4125a27f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Post = (props) => (\r\n\t<div className='card post post-body'>\r\n          <div className='card-content'>\r\n            { props.postBody}\r\n          </div>\r\n        </div>\r\n);\r\nexport default Post;","import React, { Component } from 'react';\r\nimport { TextInput, Button, Icon } from 'react-materialize';\r\n\r\nclass PostEditor extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tnewPostBody: '',\r\n\t\t};\r\n\r\n\t\tthis.handlePostEditorInputChange = this.handlePostEditorInputChange.bind(this);\r\n\t\tthis.createPost = this.createPost.bind(this);\r\n\r\n\t}\r\n\r\n\thandlePostEditorInputChange(ev) {\r\n\t\tthis.setState({\r\n\t\t  newPostBody: ev.target.value\r\n\t\t});\r\n\t  }\r\n\r\n\t  createPost() {\r\n\t\t  this.props.addPost(this.state.newPostBody);\r\n\t\t  this.setState({\r\n\t\t\t  newPostBody: '',\r\n\t\t  });\r\n\t  }\r\n\r\n\trender() {\r\n\t\treturn (\r\n\r\n\t\t\t<div className='card post-editor'>\r\n\t\t\t\t<div className='card-content'>\r\n\t\t\t\t\t<TextInput className=\"post-editor-input\" label=\"Start the conversation!\" value={this.state.newPostBody} onChange={this.handlePostEditorInputChange} />\r\n\t\t\t\t\t<Button className=\"post-editor-button\" type=\"submit\" waves=\"light\" onClick={this.props.addPost}>\r\n\t\t\t\t\t\tPost\r\n                <Icon right>\r\n\t\t\t\t\t\t\tsend\r\n                </Icon>\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\r\n\t\t)\r\n\t}\r\n\r\n\r\n}\r\nexport default PostEditor; ","import React, { Component } from \"react\";\nimport Post from \"./components/Post/post\";\nimport PostEditor from \"./components/PostEditor/postEditor\";\nimport \"./App.css\";\n\n\n\n\n\n\nclass App extends Component {\n    constructor(props) {\n      super(props);\n\n      this.addPost = this.addPost.bind(this);\n     \n      this.state = {\n        posts : [],\n      }\n    }\n\n    addPost(newPostBody) {\n      const newState = Object.assign({}, this.state)\n      newState.posts.push(newPostBody);\n      this.setState(newState);\n    }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        {\n          this.state.posts.map((postBody, idx) => {\n            return (\n              <Post key={idx} postBody={postBody}/>\n            )\n\n          })\n        }\n        <PostEditor addPost={this.addPost} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport 'materialize-css/dist/css/materialize.min.css'\nimport 'react-materialize'\nimport 'jquery';\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}